# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kxr_controller/PressureControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PressureControl(genpy.Message):
  _md5sum = "61bcf3809e7f0e409628cc484675109d"
  _type = "kxr_controller/PressureControl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 board_idx  # Do not use board id? (Currently, bus-connected air board is not supported)
float32 start_pressure  # Threshold [kPa] to start pump (Currently, pressurization is not supported)
float32 stop_pressure  # Threshold [kPa] to stop pump (Currently, pressurization is not supported)
bool release  # Set true to release air by opening valve.
"""
  __slots__ = ['board_idx','start_pressure','stop_pressure','release']
  _slot_types = ['uint16','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       board_idx,start_pressure,stop_pressure,release

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PressureControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.board_idx is None:
        self.board_idx = 0
      if self.start_pressure is None:
        self.start_pressure = 0.
      if self.stop_pressure is None:
        self.stop_pressure = 0.
      if self.release is None:
        self.release = False
    else:
      self.board_idx = 0
      self.start_pressure = 0.
      self.stop_pressure = 0.
      self.release = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2fB().pack(_x.board_idx, _x.start_pressure, _x.stop_pressure, _x.release))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.board_idx, _x.start_pressure, _x.stop_pressure, _x.release,) = _get_struct_H2fB().unpack(str[start:end])
      self.release = bool(self.release)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2fB().pack(_x.board_idx, _x.start_pressure, _x.stop_pressure, _x.release))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.board_idx, _x.start_pressure, _x.stop_pressure, _x.release,) = _get_struct_H2fB().unpack(str[start:end])
      self.release = bool(self.release)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2fB = None
def _get_struct_H2fB():
    global _struct_H2fB
    if _struct_H2fB is None:
        _struct_H2fB = struct.Struct("<H2fB")
    return _struct_H2fB
